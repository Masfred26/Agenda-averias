// ============================================================
// main.js - PRUEBA M√çNIMA DE FUNCIONALIDAD
// ============================================================

document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM Cargado. Iniciando PRUEBA M√çNIMA...");
    alert("Prueba M√≠nima: DOM Cargado. Intentando iniciar..."); // Alerta inicial

    // --- OBTENER ELEMENTOS ESENCIALES ---
    let themeToggleButton, body;
    try {
        themeToggleButton = document.getElementById('theme-toggle');
        body = document.body;

        if (!themeToggleButton || !body) {
            throw new Error("No se encontr√≥ el bot√≥n de tema o el body.");
        }
        console.log("Prueba M√≠nima: Elementos b√°sicos encontrados.");
        alert("Prueba M√≠nima: Bot√≥n de tema encontrado."); // Confirmaci√≥n

    } catch (error) {
        console.error("Error fatal obteniendo elementos b√°sicos:", error);
        alert(`Error cr√≠tico inicial: ${error.message}`);
        return; // Detener si falla aqu√≠
    }

    // --- FUNCI√ìN PARA CAMBIAR TEMA (Simplificada) ---
    function toggleTheme() {
        try {
            alert("Prueba M√≠nima: ¬°Bot√≥n de Tema Clickeado!"); // ¬øLlega aqu√≠?
            body.classList.toggle('dark-mode');
            const newTheme = body.classList.contains('dark-mode') ? 'dark' : 'light';
            localStorage.setItem('theme', newTheme);
             // Actualizar texto/icono del bot√≥n
             themeToggleButton.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
            alert(`Prueba M√≠nima: Tema cambiado a ${newTheme}`); // ¬øSe complet√≥?
        } catch (error) {
            console.error("Error en toggleTheme:", error);
            alert(`Error al cambiar tema: ${error.message}`);
        }
    }

    // --- INICIALIZACI√ìN M√çNIMA ---
    try {
        console.log("Iniciando initApp M√≠nimo...");
        alert("Prueba M√≠nima: Iniciando Inicializaci√≥n...");

        // 1. Cargar y aplicar tema inicial
        alert("Prueba M√≠nima: Cargando tema...");
        const savedTheme = localStorage.getItem('theme') || 'light';
        body.className = savedTheme === 'dark' ? 'dark-mode' : '';
        // Actualizar texto/icono del bot√≥n de tema
        themeToggleButton.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        alert(`Prueba M√≠nima: Tema cargado (${savedTheme})`);

        // 2. A√±adir SOLO el listener del bot√≥n de tema
        alert("Prueba M√≠nima: A√±adiendo listener al bot√≥n de tema...");
        if (themeToggleButton) {
            themeToggleButton.addEventListener('click', toggleTheme);
            alert("Prueba M√≠nima: Listener a√±adido con √©xito (aparentemente).");
        } else {
             alert("Prueba M√≠nima: ERROR - No se pudo a√±adir listener porque el bot√≥n no existe (esto no deber√≠a pasar).");
        }

        alert("Prueba M√≠nima: Inicializaci√≥n m√≠nima completada. Prueba el bot√≥n de tema.");
        console.log("Inicializaci√≥n m√≠nima completada.");

    } catch (error) {
        console.error("Error CR√çTICO durante initApp M√≠nimo:", error);
        alert(`Error cr√≠tico en la inicializaci√≥n m√≠nima: ${error.message}`);
        if(body) body.innerHTML = `<h1 style='color:red'>Error Cr√≠tico</h1><p>No se pudo iniciar la prueba m√≠nima: ${error.message}</p>`;
    }

}); // Fin DOMContentLoaded

console.log("main.js (Prueba M√≠nima): Script parseado completamente.");
